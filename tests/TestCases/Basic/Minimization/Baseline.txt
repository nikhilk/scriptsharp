Minimization Map
================================================================
    Member '__valueChanged' renamed to 'c$5'
    Member '_intVal' renamed to 'c$0'
    Member '_intVal2' renamed to 'c$1'
    Member '_intVal3' renamed to 'c$2'
    Member '_strVal' renamed to 'c$3'
    Member 'Alpha' renamed to '$0'
    Member 'Dispose' renamed to '$1'
    Member 'DoStuff' renamed to '$0'
    Member 'DoStuff' renamed to '$0'
    Member 'DoStuffBase' renamed to '$1'
    Member 'DoStuffBaseBase' renamed to '$0'
    Member 'DoStuffDelayed' renamed to '$4'
    Member 'DoStuffDerived' renamed to '$2'
    Member 'DoStuffInternal' renamed to '$3'
    Member 'ExecuteHandler' renamed to '$1'
    Member 'Foo' renamed to '$2'
    Member 'Initialize' renamed to '$0'
    Member 'Numeric' renamed to '$1'
    Member 'OnClicked' renamed to 'e$1'
    Member 'OnValueChanged' renamed to 'e$0'
    Member 'OnValueChanged' renamed to 'c$6'
    Member 'Property1' renamed to 'c$7'
    Member 'Setup' renamed to '$2'
    Member 'ShowHelp' renamed to '$0'
    Member 'string1' renamed to '$0'
    Member 'string2' renamed to '$1'
    Member 'Stuff' renamed to '$5'
    Member 'StuffProperty' renamed to '$6'
    Member 'TestMethod5' renamed to '$0'
    Member 'ToString' renamed to 'toString'
    Member 'ValueChanged' renamed to 'c$4'


Script
================================================================


"use strict";

define('test', ['ss', 'lib'], function(ss, lib) {
  var $global = this;

  // BasicTests.AppFlags

  var AppFlags = {
    AAA: 0, 
    BBB: 1
  };


  // BasicTests.IApp

  function IApp() { }


  // BasicTests.IInterfaceTest1

  function IInterfaceTest1() { }


  // BasicTests.IInterfaceTest2

  function IInterfaceTest2() { }


  // BasicTests.IInterfaceTest3

  function IInterfaceTest3() { }


  // BasicTests.IInterfaceTest4

  function IInterfaceTest4() { }


  // BasicTests.MyData

  function MyData(a, b) {
    var $o = {};
    $o.$0 = a;
    $o.$1 = b;
    return $o;
  }


  // BasicTests.GlobalMethodsClass

  $global.run = function() {
  };


  // BasicTests.App

  function App() {
    var helper = new AppHelper();
    helper.$0();
  }
  var App$ = {
    run: function() {
    },
    $0: function() {
    },
    $1: function() {
    }
  };


  // BasicTests.AppHelper

  function AppHelper() {
  }
  var AppHelper$ = {
    $0: function() {
    }
  };


  // BasicTests.InterfaceTest

  function InterfaceTest() {
  }
  var InterfaceTest$ = {
    testMethod1: function() {
    },
    testMethod2: function() {
    },
    testMethod3: function() {
    },
    testMethod4: function() {
    },
    $0: function() {
    }
  };


  // BasicTests.Bar

  function Bar() {
  }
  var Bar$ = {
    $0: function() {
    },
    toString: function() {
      return null;
    },
    $1: function(handler) {
    }
  };


  // BasicTests.BaseBaseClass

  function BaseBaseClass() {
  }
  var BaseBaseClass$ = {
    $0: function() {
    }
  };


  // BasicTests.ABC

  function ABC() {
    var d = { };
  }
  var ABC$ = {

  };


  // BasicTests.Bar2

  function Bar2() {
    Bar.call(this);
  }
  var Bar2$ = {

  };


  // BasicTests.BarCustom

  function BarCustom() {
    Bar.call(this);
  }
  var BarCustom$ = {

  };


  // BasicTests.BaseClass

  function BaseClass() {
    BaseBaseClass.call(this);
  }
  var BaseClass$ = {
    $1: function() {
    }
  };


  // BasicTests.BarEx

  function BarEx() {
    Bar2.call(this);
  }
  var BarEx$ = {
    $2: function() {
      var mode = 1;
    },
    $0: function() {
      this.$2();
      Bar2.prototype.$0.call(this);
      var d = MyData('a', 'b');
      d.$0 = d.$1;
    },
    $3: function(blah) {
      blah = blah + 2;
    },
    $4: function(currentValue) {
      var $this = this;

      var numericValue = currentValue + 1;
      var stringValue = currentValue.toString();
      var value = 0;
      this.$1(function(indexValue, textValue) {
        $this.$1(function(indexValue, textValue) {
          var value = 11;
          return indexValue;
        });
        var value = 10;
        var value2 = 11;
        return numericValue + indexValue + stringValue + textValue + value;
      });
    },
    $get_$5: function() {
      return 0;
    },
    $set_$5: function(value) {
      var x = value;
      return value;
    },
    $get_$6: function() {
      var $this = this;

      this.$1(function(indexValue, textValue) {
        $this.$1(function(indexValue, textValue) {
          var value = 11;
          return indexValue;
        });
        var value = 10;
        var value2 = 11;
        return indexValue + textValue + value;
      });
      return 0;
    },
    $set_$6: function(value) {
      var $this = this;

      var numericValue = value + 1;
      var stringValue = value.toString();
      this.$1(function(indexValue, textValue) {
        $this.$1(function(indexValue, textValue) {
          var value1 = 11;
          return indexValue;
        });
        var value2 = 10;
        var value3 = 11;
        return numericValue + indexValue + stringValue + textValue + value + value3;
      });
      return value;
    }
  };


  // BasicTests.BarCustom2

  function BarCustom2() {
    BarCustom.call(this);
  }
  var BarCustom2$ = {
    $2: function() {
      return 0;
    },
    baz: function() {
      return 0;
    },
    xyz: function() {
    }
  };


  // BasicTests.FooBehavior

  function FooBehavior(e, i) {
    this.c$0 = 0;
    this.c$1 = 0;
    this.c$2 = 0;
    lib.Behavior.call(this, e, null);
    this.c$0 = i;
    this.c$1 = i * 2;
    this.c$2 = i * 4;
  }
  var FooBehavior$ = {
    add_c$4: function(value) {
      this.c$5 = ss.bindAdd(this.c$5, value);
    },
    remove_c$4: function(value) {
      this.c$5 = ss.bindSub(this.c$5, value);
    },
    dispose: function() {
      this.c$0 = 0;
      lib.Behavior.prototype.dispose.call(this);
    },
    c$6: function() {
    },
    $get_c$7: function() {
      return null;
    },
    get_item: function(name) {
      return 0;
    }
  };


  // BasicTests.DerivedClass

  function DerivedClass() {
    BaseClass.call(this);
  }
  var DerivedClass$ = {
    $2: function() {
    }
  };


  // BasicTests.MaskTextBox

  function MaskTextBox(e) {
    lib.TextBox.call(this, e);
  }
  var MaskTextBox$ = {
    e$0: function() {
    },
    e$1: function() {
    }
  };


  var ns_BasicTests = "BasicTests";

  var $exports = ss.module('test', '',
    {
      IApp: ss.defineInterface(IApp, [], ns_BasicTests),
      MyData: MyData,
      AppHelper: ss.defineClass(AppHelper, AppHelper$, [], null, [], ns_BasicTests),
      InterfaceTest: ss.defineClass(InterfaceTest, InterfaceTest$, [], null, [IInterfaceTest4], ns_BasicTests),
      Bar: ss.defineClass(Bar, Bar$, [], null, [], ns_BasicTests),
      BaseBaseClass: ss.defineClass(BaseBaseClass, BaseBaseClass$, [], null, [], ns_BasicTests),
      ABC: ss.defineClass(ABC, ABC$, [], null, [], ns_BasicTests),
      Bar2: ss.defineClass(Bar2, Bar2$, [], Bar, [], ns_BasicTests),
      BarCustom: ss.defineClass(BarCustom, BarCustom$, [], Bar, [], ns_BasicTests),
      BaseClass: ss.defineClass(BaseClass, BaseClass$, [], BaseBaseClass, [], ns_BasicTests),
      BarEx: ss.defineClass(BarEx, BarEx$, [], Bar2, [], ns_BasicTests),
      BarCustom2: ss.defineClass(BarCustom2, BarCustom2$, [], BarCustom, [], ns_BasicTests),
      DerivedClass: ss.defineClass(DerivedClass, DerivedClass$, [], BaseClass, [], ns_BasicTests),
      MaskTextBox: ss.defineClass(MaskTextBox, MaskTextBox$, [Element], lib.TextBox, [], ns_BasicTests)
    },
    {
      AppFlags: AppFlags,
      IInterfaceTest1: ss.defineInterface(IInterfaceTest1, [], ns_BasicTests),
      IInterfaceTest2: ss.defineInterface(IInterfaceTest2, [IInterfaceTest1], ns_BasicTests),
      IInterfaceTest3: ss.defineInterface(IInterfaceTest3, [], ns_BasicTests),
      IInterfaceTest4: ss.defineInterface(IInterfaceTest4, [IInterfaceTest2, IInterfaceTest3], ns_BasicTests),
      App: ss.defineClass(App, App$, [], null, [], ns_BasicTests),
      FooBehavior: ss.defineClass(FooBehavior, FooBehavior$, [Element, Number], lib.Behavior, [], ns_BasicTests)
    });


  return $exports;
});
