Type.registerNamespace('test');

////////////////////////////////////////////////////////////////////////////////
// test.PublicClass

test.PublicClass = function() {
}
test.PublicClass.prototype = {
    
    format: function(i) {
        return '0';
    },
    
    parse: function(s) {
        return 0;
    }
}


////////////////////////////////////////////////////////////////////////////////
// test.InternalClass

test.InternalClass = function() {
}
test.InternalClass.prototype = {
    
    format: function(i) {
        return null;
    },
    
    parse: function(s) {
        return 0;
    }
}


////////////////////////////////////////////////////////////////////////////////
// test.PublicTests

test.PublicTests = function() {
    test.PublicTests.initializeBase(this);
}
test.PublicTests.prototype = {
    
    testFormat: function() {
        QUnit.expect(1);
        var testee = new test.PublicClass();
        var s = testee.format(0);
        QUnit.equal(s, '0', "Expected '0' for result.");
    }
}


////////////////////////////////////////////////////////////////////////////////
// test.InternalTests

test.InternalTests = function() {
    test.InternalTests.initializeBase(this);
}
test.InternalTests.prototype = {
    _startTime: null,
    _endTime: null,
    
    testFormat: function() {
        QUnit.expect(1);
        var testee = new test.InternalClass();
        var s = testee.format(0);
        QUnit.equal(s, '0', "Expected '0' for result.");
    },
    
    testParse: function() {
        QUnit.expect(1);
        var testee = new test.InternalClass();
        var i = testee.parse('0');
        QUnit.equal(i, 0, 'Expected 0 for result.');
    },
    
    setup: function() {
        this._startTime = Date.get_now();
    },
    
    cleanup: function() {
        this._endTime = Date.get_now();
    }
}


test.PublicClass.registerClass('test.PublicClass');
test.InternalClass.registerClass('test.InternalClass');
test.PublicTests.registerClass('test.PublicTests');
test.InternalTests.registerClass('test.InternalTests');

module('PublicTests', {
    setup: function() {
        this.instance = new test.PublicTests();
    },
    teardown: function() {
        delete this.instance;
    }
});

test('testFormat', function() {
    this.instance.testFormat();
});

module('InternalTests', {
    setup: function() {
        this.instance = new test.InternalTests();
        this.instance.setup();
    },
    teardown: function() {
        this.instance.cleanup();
        delete this.instance;
    }
});

test('testFormat', function() {
    this.instance.testFormat();
});
test('testParse', function() {
    this.instance.testParse();
});
