Type.registerNamespace('test');

////////////////////////////////////////////////////////////////////////////////
// test.MyClass

test.MyClass = function() {
    this._value = 1;
}
test.MyClass.prototype = {
    _value: 0
}


////////////////////////////////////////////////////////////////////////////////
// test.MyClass2

test.MyClass2 = function() {
}


////////////////////////////////////////////////////////////////////////////////
// test.MyClass3

test.MyClass3 = function(arg, arg2) {
}


////////////////////////////////////////////////////////////////////////////////
// test.MyClass4

test.MyClass4 = function(arg, arg2, arg3) {
    test.MyClass4.initializeBase(this, [ arg, arg2 ]);
}


test.MyClass.registerClass('test.MyClass');
test.MyClass2.registerClass('test.MyClass2');
test.MyClass3.registerClass('test.MyClass3');
test.MyClass4.registerClass('test.MyClass4', test.MyClass3);
test.MyClass2.x = null;
test.MyClass2.x = 'Hello';
test.MyClass3.c = null;
test.MyClass3.c = new test.MyClass();
