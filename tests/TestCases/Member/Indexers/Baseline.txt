"use strict";

define('test', ['ss'], function(ss) {
  var $global = this;

  // MemberTests.IIndexable

  function MemberTests$IIndexable() { }


  // MemberTests.Normal

  function MemberTests$Normal() {
    this._n = 0;
    var i = this.get_item('name');
    this.set_item('name', i + 1);
  }
  var MemberTests$Normal$ = {
    get_item: function(name) {
      return this._n;
    },
    set_item: function(name, value) {
      this._n = value;
      return value;
    }
  };


  // MemberTests.GetterOnly

  function MemberTests$GetterOnly() {
    this._n = 0;
    var i = this.get_item('name');
  }
  var MemberTests$GetterOnly$ = {
    get_item: function(name) {
      return this._n;
    }
  };


  // MemberTests.VirtualIndexer

  function MemberTests$VirtualIndexer() {
    this._n = 0;
    var i = this.get_item('name');
    this.set_item('name', i + 1);
  }
  var MemberTests$VirtualIndexer$ = {
    get_item: function(name) {
      return this._n;
    },
    set_item: function(name, value) {
      this._n = value;
      return value;
    }
  };


  // MemberTests.AbstractIndexer

  function MemberTests$AbstractIndexer() {
    this._n = 0;
    var i = this.get_item('name');
    this.set_item('name', i + 1);
  }
  var MemberTests$AbstractIndexer$ = {

  };


  // MemberTests.MultipleArgs

  function MemberTests$MultipleArgs() {
    this._n = 0;
    var i = this.get_item('name', 'name2', 'name3');
    this.set_item('name', 'name2', 'name3', i + 1);
  }
  var MemberTests$MultipleArgs$ = {
    get_item: function(first, middle, last) {
      var value = first + middle + last;
      return value.length;
    },
    set_item: function(first, middle, last, value) {
      this._n = value;
      return value;
    }
  };


  // MemberTests.ImplementedIndexer2

  function MemberTests$ImplementedIndexer2() {
  }
  var MemberTests$ImplementedIndexer2$ = {
    get_item: function(index) {
      return 0;
    }
  };


  // MemberTests.Test

  function MemberTests$Test() {
    var ma = new MemberTests$MultipleArgs();
    ma.set_item('1', '2', '3', ma.get_item('3', '2', '1'));
    var ii = new MemberTests$ImplementedIndexer();
    ii.set_item('big', ii.get_item('small'));
    var ai = ii;
    ai.set_item('small', ai.get_item('big'));
    var indexable = new MemberTests$ImplementedIndexer2();
    var o = indexable.get_item(0);
  }
  var MemberTests$Test$ = {

  };


  // MemberTests.A

  function MemberTests$A() {
  }
  var MemberTests$A$ = {
    get_item: function(name) {
      return name;
    }
  };


  // MemberTests.OverriddenIndexer

  function MemberTests$OverriddenIndexer() {
    MemberTests$VirtualIndexer.call(this);
    var i = this.get_item('name');
    this.set_item('name', i + 1);
    var j = ss.base(this, 'get_item').call(this, 'name');
    ss.base(this, 'set_item').call(this, 'name', 43);
  }
  var MemberTests$OverriddenIndexer$ = {
    get_item: function(name) {
      return ss.base(this, 'get_item').call(this, name) + 1;
    },
    set_item: function(name, value) {
      ss.base(this, 'set_item').call(this, name, value - 1);
      return value;
    }
  };


  // MemberTests.ImplementedIndexer

  function MemberTests$ImplementedIndexer() {
    this._n$1 = 0;
    MemberTests$AbstractIndexer.call(this);
    var i = this.get_item('name');
    this.set_item('name', i + 1);
  }
  var MemberTests$ImplementedIndexer$ = {

  };


  // MemberTests.B

  function MemberTests$B() {
    MemberTests$A.call(this);
  }
  var MemberTests$B$ = {

  };


  // MemberTests.C

  function MemberTests$C() {
    MemberTests$B.call(this);
  }
  MemberTests$C.main = function() {
    var c = new MemberTests$C();
    c.set_item('a', c.get_item('b'));
    var a = c;
    a.set_item('b', a.get_item('c'));
  };
  var MemberTests$C$ = {
    get_item: function(name) {
      return name;
    }
  };


  var $exports = ss.module('test', null,
    {
      IIndexable: [ MemberTests$IIndexable ],
      Normal: [ MemberTests$Normal, MemberTests$Normal$, null ],
      GetterOnly: [ MemberTests$GetterOnly, MemberTests$GetterOnly$, null ],
      VirtualIndexer: [ MemberTests$VirtualIndexer, MemberTests$VirtualIndexer$, null ],
      AbstractIndexer: [ MemberTests$AbstractIndexer, MemberTests$AbstractIndexer$, null ],
      MultipleArgs: [ MemberTests$MultipleArgs, MemberTests$MultipleArgs$, null ],
      ImplementedIndexer2: [ MemberTests$ImplementedIndexer2, MemberTests$ImplementedIndexer2$, null, MemberTests$IIndexable ],
      Test: [ MemberTests$Test, MemberTests$Test$, null ],
      A: [ MemberTests$A, MemberTests$A$, null ],
      OverriddenIndexer: [ MemberTests$OverriddenIndexer, MemberTests$OverriddenIndexer$, MemberTests$VirtualIndexer ],
      ImplementedIndexer: [ MemberTests$ImplementedIndexer, MemberTests$ImplementedIndexer$, MemberTests$AbstractIndexer ],
      B: [ MemberTests$B, MemberTests$B$, MemberTests$A ],
      C: [ MemberTests$C, MemberTests$C$, MemberTests$B ]
    });


  return $exports;
});
