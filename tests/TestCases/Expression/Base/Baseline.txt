Type.registerNamespace('test');

////////////////////////////////////////////////////////////////////////////////
// test.Foo

test.Foo = function(i, j) {
}
test.Foo.prototype = {
    
    toString: function() {
        return 'Foo';
    },
    
    sum: function(i) {
        return 0;
    }
}


////////////////////////////////////////////////////////////////////////////////
// test.Bar

test.Bar = function(i, j, f) {
    test.Bar.initializeBase(this, [ i, j ]);
}
test.Bar.prototype = {
    
    sum: function() {
        return test.Bar.callBaseMethod(this, 'sum', [ 1 ]) + 1;
    },
    
    toString: function() {
        return test.Bar.callBaseMethod(this, 'toString') + ' -> Bar';
    }
}


test.Foo.registerClass('test.Foo');
test.Bar.registerClass('test.Bar', test.Foo);
